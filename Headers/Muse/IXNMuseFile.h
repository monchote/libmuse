// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from muse_file.djinni

#import <Foundation/Foundation.h>

/**
 * We provide implementation for muse_file and you should ignore this class in
 * most cases. Create MuseFileWritter using MuseManager.
 * But you may provide your own implementation of Muse File if your case is
 * specific. <br>
 * <B>Threading<B> If Muse File implementation is used only to from Muse File
 * Writer, then it should not care about synchronization, because it is provided
 * by Muse File Writer. Otherwise, make sure open/write/close methods are thread-safe.
 */

@protocol IXNMuseFile

/**
 * Opens/creates file based on provided filename. Filename can include path
 * as well.<br>
 * If forWriting flag is passed then file will be opened for writing,
 * otherwise - for reading. You can open same file for both writing and
 * reading if you really (!) have to do so. Provide synchronization in
 * this case.
 * This method is called when file writer is created.
 */
- (void)open:(BOOL)forWriting;

/**
 * Writes buffer to file. <br>
 * This method is called when you flush FileWritter buffer
 */
- (void)write:(NSData *)buffer;

/**
 * Reads "length" bytes from file starting from current pointer position.
 * Returns empty buffer if file is empty or if end of file was reached.
 */
- (NSData *)read:(int32_t)length;

/**
 * Closes opened file. <br>
 * This method is called when FileWriter is destroyed, or when close()
 * is called on FileWriter.
 * If forWriting flag is passed then file will be closed for writing,
 * otherwise - for reading.
 */
- (void)close:(BOOL)forWriting;

@end
